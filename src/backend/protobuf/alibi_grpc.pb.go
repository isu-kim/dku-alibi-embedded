// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: alibi.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageUploadServiceClient is the client API for ImageUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageUploadServiceClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageUploadService_UploadImageClient, error)
}

type imageUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageUploadServiceClient(cc grpc.ClientConnInterface) ImageUploadServiceClient {
	return &imageUploadServiceClient{cc}
}

func (c *imageUploadServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageUploadService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageUploadService_ServiceDesc.Streams[0], "/grpc.ImageUploadService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageUploadServiceUploadImageClient{stream}
	return x, nil
}

type ImageUploadService_UploadImageClient interface {
	Send(*StudentFaceRequest) error
	CloseAndRecv() (*StudentFaceResponse, error)
	grpc.ClientStream
}

type imageUploadServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *imageUploadServiceUploadImageClient) Send(m *StudentFaceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageUploadServiceUploadImageClient) CloseAndRecv() (*StudentFaceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StudentFaceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageUploadServiceServer is the server API for ImageUploadService service.
// All implementations must embed UnimplementedImageUploadServiceServer
// for forward compatibility
type ImageUploadServiceServer interface {
	UploadImage(ImageUploadService_UploadImageServer) error
	mustEmbedUnimplementedImageUploadServiceServer()
}

// UnimplementedImageUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageUploadServiceServer struct {
}

func (UnimplementedImageUploadServiceServer) UploadImage(ImageUploadService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageUploadServiceServer) mustEmbedUnimplementedImageUploadServiceServer() {}

// UnsafeImageUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageUploadServiceServer will
// result in compilation errors.
type UnsafeImageUploadServiceServer interface {
	mustEmbedUnimplementedImageUploadServiceServer()
}

func RegisterImageUploadServiceServer(s grpc.ServiceRegistrar, srv ImageUploadServiceServer) {
	s.RegisterService(&ImageUploadService_ServiceDesc, srv)
}

func _ImageUploadService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageUploadServiceServer).UploadImage(&imageUploadServiceUploadImageServer{stream})
}

type ImageUploadService_UploadImageServer interface {
	SendAndClose(*StudentFaceResponse) error
	Recv() (*StudentFaceRequest, error)
	grpc.ServerStream
}

type imageUploadServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *imageUploadServiceUploadImageServer) SendAndClose(m *StudentFaceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageUploadServiceUploadImageServer) Recv() (*StudentFaceRequest, error) {
	m := new(StudentFaceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageUploadService_ServiceDesc is the grpc.ServiceDesc for ImageUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ImageUploadService",
	HandlerType: (*ImageUploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _ImageUploadService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "alibi.proto",
}
